on:
  push:
    branches: [
      master
    ]
  pull_request:
    branches: [
      master
    ]
  workflow_dispatch:  # Allows running this workflow manually from Actions tab


jobs:
  hello_world_job:
    runs-on: ubuntu-latest
    name: A job to say hello
    steps:


  #====# CHECKOUT STEPS #=====================================================#

    # https://github.com/actions/checkout
    #
    # See README: Checkout Action
    #
    - uses: actions/checkout@v2  # See README: Trusted Actions



  #====# INSTALL R3 INTERPRETER #=============================================#


    - name: Download and Cache the Interpreter
      id: hello 
      uses: metaeducation/ren-c-action@release

    - name: Output Where R3 Was Installed
      run: |
        echo "The path was ${{ steps.hello.outputs.path }}"

    - name: Demonstrate R3 is Now On Executable Path
      run: |
        r3 --do "print {Hello Path World}"

    - name: Cached Usage Test (shouldn't download again)
      uses: metaeducation/ren-c-action@release
      with:
        script: |
          print {This time, we run a script!}
          print {You can write multiple lines here...}


  #====# TEST STEPS #==========================================================#

    # The tests are designed to call QUIT and return 1 status on failure, with
    # 0 returned on success.


    # "Simple" httpd example of serving a single UTF-8 string with a high
    # codepoint.  The later tests are a superset of this one.  But if this
    # doesn't work, it's probably the easiest one to debug.
    #
    - name: Simple HTTPD (Single UTF-8 String With High Codepoint)
      run: |
        r3 tests/simple.reb


    # Stress test that sets up a client and server to transmit ever-increasing
    # amounts of data, and check that the transmission worked.
    #
    - name: Stress Test Of Transmitting Ever-Increasing Data
      run: |
        r3 tests/stress.reb


    # Variation of the stress test where the client picks a random moment in
    # the transmission to disconnect.  It does the disconnection for about half
    # of its reads, and tries to make sure the server remains robust and sends
    # data correctly for the other half.  Uses the git commit of the interpreter
    # as a random seed for reproducibility, while still varying the hangup
    # moments.
    #
    - name: Stress Test With Random Client Hangups
      run: |
        r3 tests/stress.reb -- hangup
